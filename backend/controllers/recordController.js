const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// GET /records
exports.getAllRecords = async (req, res) => {
  try {
    const records = await prisma.record.findMany();
    res.json(records);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// GET /records/:id
exports.getRecordById = async (req, res) => {
  const { id } = req.params;
  const record = await prisma.record.findUnique({ where: { id: Number(id) } });
  if (!record) return res.status(404).json({ message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  res.json(record);
};

// POST /records
exports.createRecord = async (req, res) => {
  try {
    const { title, artist, releaseDate, price, coverUrl } = req.body;

    if (!title || !artist || !releaseDate || !price) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ coverUrl, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const newRecord = await prisma.record.create({
      data: {
        title,
        artist,
        releaseDate: new Date(releaseDate),
        price: parseFloat(price),
        coverUrl
      }
    });

    console.log('‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', newRecord.title);
    res.status(201).json(newRecord);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
};

// PUT /records/:id
exports.updateRecord = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, artist, releaseDate, price, coverUrl } = req.body;

    const updated = await prisma.record.update({
      where: { id: Number(id) },
      data: {
        title,
        artist,
        releaseDate: new Date(releaseDate),
        price: parseFloat(price),
        coverUrl
      }
    });

    console.log('‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updated.title);
    res.json(updated);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
  }
};

// DELETE /records/:id
exports.deleteRecord = async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.record.delete({ where: { id: Number(id) } });
    console.log('üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞:', id);
    res.status(204).end();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
};
